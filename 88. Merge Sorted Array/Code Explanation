## **88. Merge Sorted Array**

### Problem Statement

You are given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.

Merge `nums2` into `nums1` as one sorted array.

You must do this in-place with O(1) extra memory.

---

### Step 1: Understand the Problem

- **Input:**
    - `nums1` (length m + n, first m elements are valid, rest are 0s for space)
    - `nums2` (length n)
    - `m`, `n` (number of valid elements in `nums1` and `nums2`)
- **Output:**
    - `nums1` contains all elements from both arrays, sorted
- **Constraints:**
    - In-place, O(1) extra space

---

### Step 2: Work Through Examples

**Example:**

- Input: `nums1 = [1,2,3,0,0,0]`, `m = 3`, `nums2 = [2,5,6]`, `n = 3`
- Output: `nums1 = [1,2,2,3,5,6]`

---

### Step 3: Identify the Problem Type

- Array manipulation
- In-place merging of two sorted arrays
- Two-pointer technique (from the end)

---

### Step 4: Think About Approaches

### Brute Force

- Copy `nums2` into `nums1`, sort the array (not in-place, not optimal).

### Optimal Approach (Two Pointers from End)

- Start from the end of both arrays and fill `nums1` from the back.
- Compare the largest elements and place them at the end.

---

### Step 5: Plan Before Coding

**Pseudocode:**

1. Set `p1 = m - 1` (last valid element in `nums1`)
2. Set `p2 = n - 1` (last element in `nums2`)
3. Set `p = m + n - 1` (last position in `nums1`)
4. While `p1 >= 0` and `p2 >= 0`:
    - If `nums1[p1] > nums2[p2]`, set `nums1[p] = nums1[p1]`, decrement `p1`
    - Else, set `nums1[p] = nums2[p2]`, decrement `p2`
    - Decrement `p`
5. If any elements left in `nums2`, copy them to `nums1`

---

### Step 6: Consider Edge Cases

- `nums2` is empty
- `nums1` is empty (except for zeros)
- All elements in `nums2` are smaller/larger than those in `nums1`

---

### Step 7: Complexity Analysis

- **Time Complexity:** O(m + n)
- **Space Complexity:** O(1)

---

### Step 8: Review and Reflect

- Why does this work? By filling from the end, we avoid overwriting elements in `nums1`.
- Can it be improved? This is optimal for in-place merging.